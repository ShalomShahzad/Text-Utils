{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","Components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","Title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","defaultProps","title","aboutText","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","document","getSelection","removeAllRanges","split","join","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","About","myStyle","aria-labelledby","data-bs-parent","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c25bdf30.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.Title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\"></a>\r\n          </li>\r\n        </ul>\r\n          <div className={`form-check form-switch text-${props.mode === `light`? `dark` : `light`}`}>\r\n          <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle Between Dark & Light Mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {title:PropTypes.string.isRequired, \r\n                    about:PropTypes.string}\r\n\r\nNavbar.defaultProps = {\r\n  title:\"Set Title Here\",\r\n  aboutText:\"About\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function (props) {\r\n\r\n  const handleUpClick = () => {\r\n    setText(\"You have clicked on handle up click\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase\", \"success\");\r\n  }\r\n\r\n  const handleLoClick = () => {\r\n    setText(\"You have clicked on handle up click\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase\", \"success\");\r\n  }\r\n\r\n  const handleClearClick = () => {\r\n    setText(\"You have clicked on handle up click\" + text);\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\", \"success\");\r\n  }\r\n  \r\n  const handleOnChange = (event) => {\r\n    console.log(\"handleOnChange\");\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const handleCopy = () =>{\r\n    navigator.clipboard.writeText(text);\r\n    document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Text Copied\", \"success\");\r\n  }\r\n\r\n  const handleExtraSpaces = () =>{\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Extra spaces removed\", \"success\");\r\n  }\r\n\r\n  const [text, setText] = useState('');\r\n  return (\r\n    <>\r\n    <div className=\"conatiner\" style={{color:props.mode === `dark`? `white` : `black`}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode === `dark`? `#13466e` : `white`, color:props.mode === `dark`? `white` : `black`}} id=\"myBox\" rows=\"10\"></textarea>\r\n      </div>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n\r\n    <div className=\"container my-4\" style={{color:props.mode === `dark`? `white` : `black`}}>\r\n      <h2>Your Text Summary</h2>\r\n      <p>{text.split(/\\s+/).filter((element)=>{return element.length !== 0}).length} words, {text.length} charcters</p>\r\n      <p>{0.008 * text.split(\" \").filter((element)=>{return element.length !== 0}).length} Minutes Read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function (props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n  let myStyle = {\r\n     color: props.mode === 'dark'?'white':'#042743',\r\n     backgroundColor: props.mode === 'dark'?'#042743':'white'\r\n  }\r\n\r\n  return (\r\n    <div className='container' style={myStyle}>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        About TextUtils\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is a TextUtils App. It is created by using React. In this app you input some text and this app will tell you amount of words in it, amount of characters, and will show you the preview. You can use \"Convert to Uppercase\", \"Convert to Lowercase\", and \"Clear Text\" buttons to convert the text into Uppercase, Lowercase, or clear the text respectively.\r\n          Developed by Shalom Shahzad\r\n        </strong>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\nimport About from './Components/About';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    }, 1000)\n  }\n\n  const toggleMode = () =>{\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enable\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enable\", \"success\");\n    }\n\n  }\n\n  return (\n    <>\n  <Navbar Title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={alert}/>\n  <div className=\"container my-3\">\n  <TextForm heading=\"Enter The Text To Analyze Below\" mode={mode} showAlert={showAlert}/>\n  <About mode={mode}/>\n  </div>\n    </>\n  );\n \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}